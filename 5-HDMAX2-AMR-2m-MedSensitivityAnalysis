#!/usr/bin/env Rscript
rm(list = ls())
################################################################################
# SEPAGES - AirPollution->DNAm->LF-2m SA of results from hdmax2 (using medsens)
################################################################################
# Author: Lucile
# Date: 24/01/2025
################################################################################
# Notes:
# Help for the interpretation
# https://pmc.ncbi.nlm.nih.gov/articles/PMC5124624/
# -> new version based on AMR average methylation level, for consistency
################################################################################
# Paths and parameters
#------------------------------------------------------------------------------#

# Methylation data (pre-processed; Rscript 0-PreprocessingDNAme.R)
methFile <- "~/Data/DNAmethylplacenta_adjfunnorm_preprocessed_autosomes.rds"

metaFile <- "Data/SEP_metaData_imp_2m.rds"

expoFile <- "Data/SEP_AirPollutionData.rds"

K <- 6

sims <- 1000 # Number of simulations in wrap_mediation

outFile <-  "SA/results_medsens_amr_avg_20250124.rds"

################################################################################
# Set seed (simulation)
#------------------------------------------------------------------------------#

set.seed(38)

################################################################################
# R packages
#------------------------------------------------------------------------------#

library(magrittr)
library(data.table)

source("Rscripts/Rfunctions.R")

################################################################################
# R functions
#------------------------------------------------------------------------------#

# Transform categorical columns into numeric dummy covariate(s)
# For lfmm
CatAsDummy <- function(df){
  
  for(i in 1:ncol(data.frame(df))){
    
    x <- fastDummies::dummy_cols(.data = data.frame(df[,i]), 
                                 remove_first_dummy = T, 
                                 remove_selected_columns = T)
    colnames(x) <- paste(colnames(df)[i], 1:ncol(x), sep = "_")
    if(i == 1){
      df.res <- x 
    }else{
      df.res <- cbind.data.frame(df.res, x)
    }
  }
  return( df.res )
}

simplifyGeneName <- function(name){ 
  name <- stringr::str_split(name, pattern = ";", simplify = T)
  name <- unique(c(name))
  name <- name[stringi::stri_order(name)]
  name <- paste0(name, collapse = ";")
  return( name )
}

getLocations <- function(loc.vector, sep = ";"){
  
  locations <- tapply(loc.vector, seq_along(loc.vector),
                      FUN = function(s) stringr::str_split(s, pattern = sep, simplify = T))
  locations <- unlist(locations)
  locations <- unique(locations)
  locations <- locations[stringi::stri_order(locations)]
  locations <- paste0(locations, collapse = ";")
  
  return(locations)
}


################################################################################
# Exposures and outcomes
#------------------------------------------------------------------------------#

exposure.names <- c("DTTv", "AAv","NO2_perso", "PM25_perso")

outcome.names <- c("LCI","FRC","TV","RR","MinVent", "tPTEF_tE")

################################################################################
# Model (Med1) M = X + covar_xm regression
# covar_xm including only prenatal covariates
#------------------------------------------------------------------------------#

continuous_covariates.xm <- c("MaternalAge", 
                              "MaternalBMI",
                              "EDI")

categorical_covariates.xm <- c("ChildSex", 
                               "MaternalSmoking", 
                               "Parity", 
                               "ParentalEducation")

confounders1 <- c(continuous_covariates.xm,
                  paste0(categorical_covariates.xm, "_", "1"))

################################################################################
# Model (Med2) Y = X + M + covar_xmy regression, 
# covar_xmy including prenatal and postnatal covariates
#------------------------------------------------------------------------------#

continuous_covariates.xmy <- c("MaternalAge", 
                               "MaternalBMI", 
                               "EDI",
                               "ChildLength.2m")

categorical_covariates.xmy <- c("ChildSex", 
                                "MaternalSmoking", 
                                "Parity", 
                                "ChildPassiveSmoking.12m",
                                "ParentalEducation",
                                "ParentalRhinitis",
                                "SeasonConception")

confounders2 <- c(continuous_covariates.xmy,
                  paste0(categorical_covariates.xmy, "_", "1"),
                  "SeasonConception_2",
                  "SeasonConception_3")

################################################################################
# Load methylation data
#------------------------------------------------------------------------------#

meth.all <- readRDS(methFile)
dim(meth.all)
#755365    395

################################################################################
# ...
#------------------------------------------------------------------------------#

# To determine an arbitrary threshold for rho
confounders <- c("MaternalBMI", 
                 "MaternalAge", 
                 "EDI", 
                 "MaternalSmoking_1", 
                 "Parity_1", 
                 "ChildSex_1",
                 "ParentalEducation_1", 
                 "ParentalRhinitis_1")

results.medsens <- data.frame()

for(exposure.name in exposure.names){
  
  ################################################################################
  # Load results from hdmax2
  #------------------------------------------------------------------------------#
  
  inFile.hdmax2 <- paste0("hdmax2/hdmax2_cpgInDmrs_", exposure.name, ".rds")
  
  if(file.exists(inFile.hdmax2)){
  
    results <- readRDS(inFile.hdmax2)
    results <- results %>% dplyr::mutate(reliable = as.numeric(indiv>grouping+error))
    
    amrs <- results %>% dplyr::group_by(Exposure, Outcome, 
                                        DMR.DMR, chr, DMR.start, DMR.end, DMR.p, DMR.fdr, DMR.nb) %>%
      dplyr::summarize(geneName = simplifyGeneName(geneName), 
                       Location = getLocations(location),
                       reliable = sum(reliable)) %>% data.frame()
    
    # +select DMRs with at least 1 reliable probe?
    amrs <- amrs %>% dplyr::filter(reliable>=1 & DMR.nb>=3)
    # +select DMRs with FDR<0.05
    amrs <- amrs %>% dplyr::filter(DMR.fdr<0.05)
    
    for(outcome.name in outcome.names){
      
      # Results for the current outcome
      
      res.outcome <- results %>% dplyr::filter(Outcome == outcome.name) 
      res.amrs <- amrs %>% dplyr::filter(Outcome == outcome.name)
      
      res.amrs <- cbind.data.frame(res.amrs, 
                                   data.frame(rho.acme = NA, rho.ade = NA, 
                                              minCorrConfounders = NA, maxCorrConfounders = NA))
      
      
      if(nrow(res.outcome)>0){
  
      ################################################################################
      # Load metaData
      #------------------------------------------------------------------------------#
      
      metaData <- readRDS(metaFile)
      
      if(exposure.name %in% c("PM25_perso", "NO2_perso", "DTTv", "AAv")){
        metaData <- merge(metaData, readRDS(expoFile)[,c("id", exposure.name)], by = "id")
      }
     
      metaData <- metaData %>% dplyr::filter(id %in% colnames(meth.all))
      dim(metaData)
      # 395  36
      
      metaData <- metaData[,c("id", union(categorical_covariates.xm, categorical_covariates.xmy),
                              union(continuous_covariates.xm,continuous_covariates.xmy),
                              exposure.name, outcome.name)]
      
      metaData <- metaData[complete.cases(metaData),]
      
      PHENO <- cbind.data.frame(id = metaData$id,
                                CatAsDummy(metaData[,union(categorical_covariates.xm, categorical_covariates.xmy)]),
                                metaData[,union(continuous_covariates.xm,continuous_covariates.xmy)],
                                metaData[,c(exposure.name,outcome.name)])
    
      ################################################################################
      # Load Rdata (results from the two models for mediation)
      #------------------------------------------------------------------------------#
      
      inFile.dat <- paste0("resEWAS/resEWAS-",
                           exposure.name, "-", outcome.name,".RData")
      
      load(inFile.dat) # res
      
      PHENO <- merge(PHENO, data.frame(id = rownames(res$U), res$U), by = "id")
      
      meth <- meth.all[,as.character(PHENO$id)]
      
      ################################################################################
      stopifnot(identical(colnames(meth),as.character(PHENO$id)))
      ################################################################################
  
      ################################################################################
      ## Run 
      #------------------------------------------------------------------------------#
      

      for(c in seq_along(res.amrs$DMR.DMR)){
      
        # Get CpGs in the AMR
        CpGs <- dplyr::filter(results, Outcome == res.amrs$Outcome[c] & 
                                       Exposure == res.amrs$Exposure[c] & 
                                       DMR.DMR == res.amrs$DMR.DMR[c])$CpG
        
        # Compute average methylation level of the region
        PHENO$Mi <- apply(meth[CpGs,], 2, mean)
  
        formula1 <- stats::as.formula(paste0("Mi ~ ", exposure.name, "+",
                                         paste0(c(confounders1, paste0("LF", 1:ncol(res$U))), collapse = "+")))
        
        mod1 <- stats::lm(formula = formula1, data = PHENO)
        
        formula2 <- stats::as.formula(paste0(outcome.name, " ~ ", 
                                         exposure.name, 
                                         "+ Mi +",
                                         paste0(c(confounders2, paste0("LF", 1:ncol(res$U))), collapse = "+")))
        
        mod2 <- stats::lm(formula = formula2, data = PHENO) 
        
        set.seed(38)
        med <- mediation::mediate(model.m = mod1, 
                                  model.y = mod2, 
                                  sims = sims, 
                                  treat = exposure.name, 
                                  mediator = "Mi")
        
        res.medsens <- mediation:: medsens(x = med,
                                           rho.by = 0.05, 
                                           sims = sims,
                                           eps = sqrt(.Machine$double.eps), 
                                           effect.type = "both")
        x <- summary(res.medsens)
        res.amrs$rho.acme[c] <- x$err.cr.d
        res.amrs$rho.ade[c] <- x$err.cr.z
        
        correlations <- c()
        for(c in seq_along(confounders)){
          
          u <- PHENO[,confounders[c]]
          
          a1 <- cor(PHENO$Mi, u, use = "pairwise.complete")
          a2 <- cor(PHENO[,outcome.name], u, use = "pairwise.complete")
          correlations <- c(correlations, c(a1, a2))
          
        }
        
        res.amrs$minCorrConfounders[c] <- min(correlations)
        res.amrs$maxCorrConfounders[c] <- max(correlations)
        #result$R2star.acme[c] <- x$R2star.d.thresh
        #result$R2tilde.acme[c] <- x$R2tilde.d.thresh
        
        #result$R2star.ade[c] <- x$R2star.z.thresh
        #result$R2tilde.ade[c] <- x$R2tilde.z.thresh
      }
      
      ################################################################################
      gc()
      ################################################################################
      
      results.medsens <- rbind.data.frame(results.medsens, res.amrs)
      
    }# END loop on outcomes
  }
  
}
}# END loop on exposures

dim(results.medsens)

################################################################################
## Merge with hdmax results
#------------------------------------------------------------------------------#

#results.comball.full <- merge(results, results.comball, by = "CpG")

#dim(results.comball.full)

################################################################################
## Save
#------------------------------------------------------------------------------#

saveRDS(results.medsens, file = outFile)

################################################################################
